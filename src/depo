depo() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo -e "Usage: depo [package.json]\n"
    echo "  -h, --help         Show this help message"
    echo "  No argument        Prompts you to paste JSON input"
    return 0
  fi

  if [[ -z "$1" ]]; then
    echo "[*] No input file provided."
    echo "Paste your full package.json content and press Ctrl+D when done:"
    json_input_file=$(mktemp)
    cat > "$json_input_file"
  else
    json_input_file="$1"
    if [[ ! -f "$json_input_file" ]]; then
      echo "[-] File '$json_input_file' not found."
      return 1
    fi
  fi

  pkglist=$(mktemp)
  verslist=$(mktemp)

  jq -r '
    to_entries[] | select(.value | type == "object") | .value | to_entries[] |
    "\(.key) \(.value)"
  ' "$json_input_file" | while read -r name version; do
    cleanver=$(echo "$version" | sed 's/[^0-9.]*//g')
    echo "$name" >> "$pkglist"
    if [[ -n "$cleanver" ]]; then
      echo "https://registry.npmjs.org/$name/$cleanver" >> "$verslist"
    fi
  done

  echo "[+] Total unique packages: $(sort -u "$pkglist" | wc -l)"
  echo "[*] Fuzzing package names on https://npmjs.com/package/FUZZ ..."
  ffuf -w "$pkglist" -u https://www.npmjs.com/package/FUZZ -mc all -fc 200

  echo "[*] Checking version-specific URLs..."
  while read -r url; do
    code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    if [[ "$code" == "404" ]]; then
      echo "‚ùå Missing version: $url"
    fi
  done < "$verslist"
}

